# S-Box và Inverse S-Box cho SubBytes
SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

INV_SBOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Bảng Rcon cho Key Expansion
RCON = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]

def sub_bytes(state):
    return [SBOX[b] for b in state]

def inv_sub_bytes(state):
    return [INV_SBOX[b] for b in state]

def shift_rows(state):
    return [
        state[0], state[5], state[10], state[15],
        state[4], state[9], state[14], state[3],
        state[8], state[13], state[2], state[7],
        state[12], state[1], state[6], state[11]
    ]

def inv_shift_rows(state):
    return [
        state[0], state[13], state[10], state[7],
        state[4], state[1], state[14], state[11],
        state[8], state[5], state[2], state[15],
        state[12], state[9], state[6], state[3]
    ]

def mix_columns(state):
    def gf_mult(a, b):
        p = 0
        for _ in range(8):
            if b & 1:
                p ^= a
            hi_bit_set = a & 0x80
            a <<= 1
            if hi_bit_set:
                a ^= 0x1b
            a &= 0xFF
            b >>= 1
        return p & 0xFF
    
    result = [0] * 16
    for col in range(4):
        result[col] = gf_mult(2, state[col]) ^ gf_mult(3, state[4 + col]) ^ state[8 + col] ^ state[12 + col]
        result[4 + col] = state[col] ^ gf_mult(2, state[4 + col]) ^ gf_mult(3, state[8 + col]) ^ state[12 + col]
        result[8 + col] = state[col] ^ state[4 + col] ^ gf_mult(2, state[8 + col]) ^ gf_mult(3, state[12 + col])
        result[12 + col] = gf_mult(3, state[col]) ^ state[4 + col] ^ state[8 + col] ^ gf_mult(2, state[12 + col])
    return result

def inv_mix_columns(state):
    def gf_mult(a, b):
        p = 0
        for _ in range(8):
            if b & 1:
                p ^= a
            hi_bit_set = a & 0x80
            a <<= 1
            if hi_bit_set:
                a ^= 0x1b
            a &= 0xFF
            b >>= 1
        return p & 0xFF
    
    result = [0] * 16
    for col in range(4):
        result[col] = gf_mult(0xe, state[col]) ^ gf_mult(0xb, state[4 + col]) ^ gf_mult(0xd, state[8 + col]) ^ gf_mult(0x9, state[12 + col])
        result[4 + col] = gf_mult(0x9, state[col]) ^ gf_mult(0xe, state[4 + col]) ^ gf_mult(0xb, state[8 + col]) ^ gf_mult(0xd, state[12 + col])
        result[8 + col] = gf_mult(0xd, state[col]) ^ gf_mult(0x9, state[4 + col]) ^ gf_mult(0xe, state[8 + col]) ^ gf_mult(0xb, state[12 + col])
        result[12 + col] = gf_mult(0xb, state[col]) ^ gf_mult(0xd, state[4 + col]) ^ gf_mult(0x9, state[8 + col]) ^ gf_mult(0xe, state[12 + col])
    return result

def add_round_key(state, round_key):
    return [state[i] ^ round_key[i] for i in range(16)]

def key_expansion(key):
    key_len = len(key)
    if key_len not in (16, 24, 32):
        raise ValueError("Key must be 16, 24, or 32 bytes")
    
    Nk = key_len // 4  # Số từ trong khóa (4, 6, 8)
    Nr = {16: 10, 24: 12, 32: 14}[key_len]  # Số vòng
    Nw = 4 * (Nr + 1)  # Tổng số từ trong khóa mở rộng
    
    key_words = [int.from_bytes(key[i:i+4], 'big') for i in range(0, key_len, 4)]
    expanded_key = key_words[:]
    
    for i in range(Nk, Nw):
        temp = expanded_key[i-1]
        if i % Nk == 0:
            temp = (temp << 8) | (temp >> 24) & 0xFFFFFFFF
            temp = (SBOX[(temp >> 24) & 0xFF] << 24) | (SBOX[(temp >> 16) & 0xFF] << 16) | \
                   (SBOX[(temp >> 8) & 0xFF] << 8) | SBOX[temp & 0xFF]
            temp ^= (RCON[i//Nk - 1] << 24)
        elif Nk > 6 and i % Nk == 4:  # Chỉ áp dụng cho AES-256
            temp = (SBOX[(temp >> 24) & 0xFF] << 24) | (SBOX[(temp >> 16) & 0xFF] << 16) | \
                   (SBOX[(temp >> 8) & 0xFF] << 8) | SBOX[temp & 0xFF]
        expanded_key.append(expanded_key[i-Nk] ^ temp)
    
    return [byte for word in expanded_key for byte in word.to_bytes(4, 'big')]

def aes_encrypt_block(plaintext, key):
    if len(plaintext) != 16:
        raise ValueError("Block must be 16 bytes")
    key_len = len(key)
    if key_len not in (16, 24, 32):
        raise ValueError("Key must be 16, 24, or 32 bytes")
    
    Nr = {16: 10, 24: 12, 32: 14}[key_len]
    expanded_key = key_expansion(key)
    state = list(plaintext)
    
    state = add_round_key(state, expanded_key[0:16])
    for round in range(1, Nr):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, expanded_key[round*16:(round+1)*16])
    
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, expanded_key[Nr*16:(Nr+1)*16])
    
    return bytes(state)

def aes_decrypt_block(ciphertext, key):
    if len(ciphertext) != 16:
        raise ValueError("Block must be 16 bytes")
    key_len = len(key)
    if key_len not in (16, 24, 32):
        raise ValueError("Key must be 16, 24, or 32 bytes")
    
    Nr = {16: 10, 24: 12, 32: 14}[key_len]
    expanded_key = key_expansion(key)
    state = list(ciphertext)
    
    state = add_round_key(state, expanded_key[Nr*16:(Nr+1)*16])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    
    for round in range(Nr-1, 0, -1):
        state = add_round_key(state, expanded_key[round*16:(round+1)*16])
        state = inv_mix_columns(state)
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
    
    state = add_round_key(state, expanded_key[0:16])
    return bytes(state)

def pad_data(data, block_size=16):
    padding_len = block_size - (len(data) % block_size)
    padding = bytes([padding_len] * padding_len)
    return data + padding

def unpad_data(data):
    padding_len = data[-1]
    if padding_len > 16 or padding_len < 1 or not all(b == padding_len for b in data[-padding_len:]):
        raise ValueError("Invalid padding")
    return data[:-padding_len]

def aes_encrypt_string(input_string, key):
    """
    Mã hóa chuỗi đầu vào bằng AES-ECB với khóa linh hoạt
    - input_string: chuỗi cần mã hóa
    - key: khóa AES (16, 24 hoặc 32 bytes)
    """
    if len(key) not in (16, 24, 32):
        raise ValueError("Key must be 16, 24, or 32 bytes")
    
    plaintext = input_string.encode('utf-8')
    padded_data = pad_data(plaintext)
    
    ciphertext = b''
    for i in range(0, len(padded_data), 16):
        block = padded_data[i:i+16]
        ciphertext += aes_encrypt_block(block, key)
    
    return ciphertext

def aes_decrypt_string(ciphertext, key):
    """
    Giải mã chuỗi từ ciphertext bằng AES-ECB với khóa linh hoạt
    - ciphertext: dữ liệu mã hóa (bytes)
    - key: khóa AES (16, 24 hoặc 32 bytes)
    """
    if len(key) not in (16, 24, 32):
        raise ValueError("Key must be 16, 24, or 32 bytes")
    if len(ciphertext) % 16 != 0:
        raise ValueError("Ciphertext length must be multiple of 16")
    
    plaintext = b''
    for i in range(0, len(ciphertext), 16):
        block = ciphertext[i:i+16]
        plaintext += aes_decrypt_block(block, key)
    
    unpadded_data = unpad_data(plaintext)
    return unpadded_data.decode('utf-8')